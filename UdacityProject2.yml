AWSTemplateFormatVersion: 2010-09-09

Description:

  UdacityProject2 created to launch Udagram web application
  
Parameters:  
  
    EnvironmentName:
        Description: This parameter will give the environment name like Udacity, or Test, or Pro
        Type: String
  
    VpcCIDR: 
        Description: Add CIDR block (Subnet) for this VPC
        Type: String

    PublicSubnet1CIDR:
        Description: Add CIDR block (Subnet) for the public subnet in 1st Availability Zone
        Type: String

    PublicSubnet2CIDR:
        Description: Add CIDR block (Subnet) for the public subnet in 2nd Availability Zone
        Type: String

    PrivateSubnet1CIDR:
        Description: Add CIDR block (Subnet) for the private subnet in 1st Availability Zone
        Type: String

    PrivateSubnet2CIDR:
        Description: Add CIDR block (Subnet) for the private subnet in 2nd Availability Zone
        Type: String

Resources:

    # VPC Network Resources
    VPC: 
      Type: AWS::EC2::VPC
      Properties:
          CidrBlock: !Ref VpcCIDR
          EnableDnsHostnames: true
          Tags: 
              - Key: Name 
                Value: !Ref EnvironmentName
          
    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
          Tags:
              - Key: Name
                Value: !Ref EnvironmentName
    
    InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
          InternetGatewayId: !Ref InternetGateway
          VpcId: !Ref VPC

    PublicSubnet1: 
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 0, !GetAZs '' ]
          CidrBlock: !Ref PublicSubnet1CIDR
          MapPublicIpOnLaunch: true
          Tags: 
              - Key: Name 
                Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

    PublicSubnet2: 
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 1, !GetAZs '' ]
          CidrBlock: !Ref PublicSubnet2CIDR
          MapPublicIpOnLaunch: true
          Tags: 
              - Key: Name 
                Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

    PrivateSubnet1: 
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 0, !GetAZs '' ]
          CidrBlock: !Ref PrivateSubnet1CIDR
          MapPublicIpOnLaunch: false
          Tags: 
              - Key: Name 
                Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

    PrivateSubnet2: 
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 1, !GetAZs '' ]
          CidrBlock: !Ref PrivateSubnet2CIDR
          MapPublicIpOnLaunch: false
          Tags: 
              - Key: Name 
                Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

    NatGateway1EIP:
      Type: AWS::EC2::EIP
      DependsOn: InternetGatewayAttachment
      Properties: 
          Domain: vpc

    NatGateway2EIP:
      Type: AWS::EC2::EIP
      DependsOn: InternetGatewayAttachment
      Properties:
          Domain: vpc
    
    NatGateway1: 
      Type: AWS::EC2::NatGateway
      Properties: 
          AllocationId: !GetAtt NatGateway1EIP.AllocationId
          SubnetId: !Ref PublicSubnet1

    NatGateway2: 
      Type: AWS::EC2::NatGateway
      Properties:
          AllocationId: !GetAtt NatGateway2EIP.AllocationId
          SubnetId: !Ref PublicSubnet2

    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties: 
          VpcId: !Ref VPC
          Tags: 
              - Key: Name 
                Value: !Sub ${EnvironmentName} Public Routes

    PublicRouteTableDefaultRoute:
      Type: AWS::EC2::Route
      DependsOn: InternetGatewayAttachment
      Properties: 
          RouteTableId: !Ref PublicRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref PublicSubnet1

    PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref PublicSubnet2
  
    PrivateRouteTableAZ1:
      Type: AWS::EC2::RouteTable
      Properties: 
          VpcId: !Ref VPC
          Tags: 
              - Key: Name 
                Value: !Sub ${EnvironmentName} Private Routes (AZ1)

    PrivateRouteTableAZ1DefaultRoute:
      Type: AWS::EC2::Route
      Properties:
          RouteTableId: !Ref PrivateRouteTableAZ1
          DestinationCidrBlock: 0.0.0.0/0
          NatGatewayId: !Ref NatGateway1

    PrivateSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PrivateRouteTableAZ1
          SubnetId: !Ref PrivateSubnet1

    PrivateRouteTableAZ2:
      Type: AWS::EC2::RouteTable
      Properties: 
          VpcId: !Ref VPC
          Tags: 
              - Key: Name 
                Value: !Sub ${EnvironmentName} Private Routes (AZ2)

    DefaultPrivateRoute2:
      Type: AWS::EC2::Route
      Properties:
          RouteTableId: !Ref PrivateRouteTableAZ2
          DestinationCidrBlock: 0.0.0.0/0
          NatGatewayId: !Ref NatGateway2

    PrivateSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PrivateRouteTableAZ2
          SubnetId: !Ref PrivateSubnet2
 

    # EC2 Servers Resources
    # VPC default security group
    VPCsecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupName: VPCsecGroup
            GroupDescription:  VPC default Security Group
            VpcId: !Ref VPC
            SecurityGroupIngress:
            -   IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
            -   IpProtocol: tcp
                FromPort: 0
                ToPort: 65535
                CidrIp: 0.0.0.0/0
    
    # Web Server Security Group
    WebServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            GroupDescription: Allow inbound http and ssh ports (80, 22). Allow outbound ephemeral ports (0-65535)
            GroupName: WebServerSecGroup
            SecurityGroupIngress: 
            -   IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 0.0.0.0/0
            SecurityGroupEgress: 
            -   IpProtocol: -1
                FromPort: -1
                ToPort: -1
                CidrIp: 0.0.0.0/0
            Tags: 
            -   Key: Project
                Value: !Ref EnvironmentName
            VpcId: !Ref VPC
    LBSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            GroupDescription: Allow inbound/outbound http traffic port 80
            GroupName: LBSecGroup
            SecurityGroupIngress: 
            -   IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 0.0.0.0/0
            SecurityGroupEgress: 
            -   IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 0.0.0.0/0
            Tags: 
            -   Key: Project
                Value: !Ref EnvironmentName
            VpcId: !Ref VPC
    # EC2 Appache Web Server Launch Configuration
    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            UserData:
                Fn::Base64: !Sub |
                        #!/bin/bash
                        sudo apt-get update -y
                        sudo apt-get install apache2 -y
                        sudo systemctl start apache2.service
                        cd /var/www/html
                        sudo chown -R $USER:$USER /var/www
                        echo "Udacity Demo Web Server Up and Running!, UdacityProject2, Islam Yassein" > index.html       
            # ToDo: AMI ID of Ubuntu Linux machine. Too get one, try creating a VM from the web console. 
            ImageId: ami-00ddb0e5626798373
            # ToDo: Change the key-pair name, as applicable to you. 
            KeyName: islamyassein
            SecurityGroups:
            -   !Ref WebServerSecGroup
            -   !Ref VPCsecGroup
            InstanceType: t3.medium
            BlockDeviceMappings:
            -   DeviceName: "/dev/sdk"
                Ebs:
                    VolumeSize: 10
    # Web Server Auto Scaling Group
    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
            LaunchConfigurationName: !Ref WebAppLaunchConfig
            #LaunchTemplate:
            #  LaunchTemplateId: !Ref myWebAppLaunchTemplate
            #  Version: !Ref myLaunchTemplateVersionNumber
            MinSize: "4"
            MaxSize: "5"
            TargetGroupARNs:
            - !Ref WebAppLBTargetGroup # Refers to Loadbalancer TargetGroup

    # Load Balancer
    WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Subnets:
            -   !Ref PublicSubnet1
            -   !Ref PublicSubnet2
            SecurityGroups:
            -   !Ref LBSecGroup

    # Load Balancer Target Group
    WebAppLBTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 8
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId: !Ref VPC

    # Load Balancer Listener
    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
            -   Type: forward
                TargetGroupArn: !Ref WebAppLBTargetGroup
            LoadBalancerArn: !Ref WebAppLB
            Port: 80
            Protocol: HTTP

    # Load Balancer Listener Rule
    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
            -   Type: forward
                TargetGroupArn: !Ref WebAppLBTargetGroup
            Conditions:
            -   Field: path-pattern
                Values: [/]
            ListenerArn: !Ref Listener
            Priority: 1
Outputs:
  
    LoadBalancerURL:
        Description: LoadBalancerURL full URL
        Value: 
            Fn::Join: ["",["http://",!GetAtt WebAppLB.DNSName]]
        Export: 
            Name: !Sub ${EnvironmentName}-ApplicationURL
